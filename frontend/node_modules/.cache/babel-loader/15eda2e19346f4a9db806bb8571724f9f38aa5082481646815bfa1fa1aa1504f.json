{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nconst user = JSON.parse(localStorage.getItem(\"user\"));\nconst initialState = {\n  user: user ? user : null,\n  isLoading: false,\n  isError: false,\n  isSuccess: false,\n  message: \"\"\n};\n\n//Below we list out our actions\n//Register user\nexport const register = createAsyncThunk(\"auth/register\", async (userData, thunkAPI) => {\n  try {\n    return await authService.register(userData);\n  } catch (error) {\n    //here we get message from the backend\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\n\n// Login user\nexport const login = createAsyncThunk(\"auth/login\", async (userData, thunkAPI) => {\n  try {\n    console.log(userData);\n  } catch (error) {}\n});\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    reset: state => {\n      state.isLoading = false;\n      state.isError = false;\n      state.isSuccess = false;\n      state.message = \"\";\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(register.pending, state => {\n      state.isLoading = true;\n    }).addCase(register.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.user = action.payload;\n    }).addCase(register.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    });\n  }\n});\nexport const {\n  reset\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","user","JSON","parse","localStorage","getItem","initialState","isLoading","isError","isSuccess","message","register","userData","thunkAPI","authService","error","response","data","toString","rejectWithValue","login","console","log","authSlice","name","reducers","reset","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","actions","reducer"],"sources":["E:/front-to-backend/support-ticket/frontend/src/features/auth/authSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\"\r\n\r\nconst user = JSON.parse(localStorage.getItem(\"user\"))\r\n\r\nconst initialState = {\r\n    user: user ? user : null,\r\n    isLoading: false,\r\n    isError: false,\r\n    isSuccess: false,\r\n    message: \"\"\r\n}\r\n\r\n\r\n//Below we list out our actions\r\n//Register user\r\nexport const register = createAsyncThunk(\"auth/register\", async (userData, thunkAPI) => {\r\n    try {\r\n        return await authService.register(userData)\r\n    } catch (error) {\r\n        //here we get message from the backend\r\n        const message = (error.response && error.response.data && error.response.data.message)\r\n            || error.message\r\n            || error.toString()\r\n        return thunkAPI.rejectWithValue(message)\r\n    }\r\n})\r\n\r\n\r\n// Login user\r\nexport const login = createAsyncThunk(\"auth/login\", async (userData, thunkAPI) => {\r\n    try {\r\n        console.log(userData)\r\n    } catch (error) {\r\n\r\n    }\r\n})\r\n\r\n\r\nexport const authSlice = createSlice({\r\n    name: 'auth',\r\n    initialState,\r\n    reducers: {\r\n        reset: (state) => {\r\n            state.isLoading = false\r\n            state.isError = false\r\n            state.isSuccess = false\r\n            state.message = \"\"\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(register.pending, (state) => {\r\n                state.isLoading = true\r\n            })\r\n            .addCase(register.fulfilled, (state, action) => {\r\n                state.isLoading = false\r\n                state.isSuccess = true\r\n                state.user = action.payload\r\n            })\r\n            .addCase(register.rejected, (state, action) => {\r\n                state.isLoading = false\r\n                state.isError = true\r\n                state.message = action.payload\r\n            })\r\n    }\r\n})\r\n\r\n\r\nexport const { reset } = authSlice.actions\r\nexport default authSlice.reducer"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAEhE,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC;AAErD,MAAMC,YAAY,GAAG;EACjBL,IAAI,EAAEA,IAAI,GAAGA,IAAI,GAAG,IAAI;EACxBM,SAAS,EAAE,KAAK;EAChBC,OAAO,EAAE,KAAK;EACdC,SAAS,EAAE,KAAK;EAChBC,OAAO,EAAE;AACb,CAAC;;AAGD;AACA;AACA,OAAO,MAAMC,QAAQ,GAAGX,gBAAgB,CAAC,eAAe,EAAE,OAAOY,QAAQ,EAAEC,QAAQ,KAAK;EACpF,IAAI;IACA,OAAO,MAAMC,WAAW,CAACH,QAAQ,CAACC,QAAQ,CAAC;EAC/C,CAAC,CAAC,OAAOG,KAAK,EAAE;IACZ;IACA,MAAML,OAAO,GAAIK,KAAK,CAACC,QAAQ,IAAID,KAAK,CAACC,QAAQ,CAACC,IAAI,IAAIF,KAAK,CAACC,QAAQ,CAACC,IAAI,CAACP,OAAO,IAC9EK,KAAK,CAACL,OAAO,IACbK,KAAK,CAACG,QAAQ,CAAC,CAAC;IACvB,OAAOL,QAAQ,CAACM,eAAe,CAACT,OAAO,CAAC;EAC5C;AACJ,CAAC,CAAC;;AAGF;AACA,OAAO,MAAMU,KAAK,GAAGpB,gBAAgB,CAAC,YAAY,EAAE,OAAOY,QAAQ,EAAEC,QAAQ,KAAK;EAC9E,IAAI;IACAQ,OAAO,CAACC,GAAG,CAACV,QAAQ,CAAC;EACzB,CAAC,CAAC,OAAOG,KAAK,EAAE,CAEhB;AACJ,CAAC,CAAC;AAGF,OAAO,MAAMQ,SAAS,GAAGxB,WAAW,CAAC;EACjCyB,IAAI,EAAE,MAAM;EACZlB,YAAY;EACZmB,QAAQ,EAAE;IACNC,KAAK,EAAGC,KAAK,IAAK;MACdA,KAAK,CAACpB,SAAS,GAAG,KAAK;MACvBoB,KAAK,CAACnB,OAAO,GAAG,KAAK;MACrBmB,KAAK,CAAClB,SAAS,GAAG,KAAK;MACvBkB,KAAK,CAACjB,OAAO,GAAG,EAAE;IACtB;EACJ,CAAC;EACDkB,aAAa,EAAGC,OAAO,IAAK;IACxBA,OAAO,CACFC,OAAO,CAACnB,QAAQ,CAACoB,OAAO,EAAGJ,KAAK,IAAK;MAClCA,KAAK,CAACpB,SAAS,GAAG,IAAI;IAC1B,CAAC,CAAC,CACDuB,OAAO,CAACnB,QAAQ,CAACqB,SAAS,EAAE,CAACL,KAAK,EAAEM,MAAM,KAAK;MAC5CN,KAAK,CAACpB,SAAS,GAAG,KAAK;MACvBoB,KAAK,CAAClB,SAAS,GAAG,IAAI;MACtBkB,KAAK,CAAC1B,IAAI,GAAGgC,MAAM,CAACC,OAAO;IAC/B,CAAC,CAAC,CACDJ,OAAO,CAACnB,QAAQ,CAACwB,QAAQ,EAAE,CAACR,KAAK,EAAEM,MAAM,KAAK;MAC3CN,KAAK,CAACpB,SAAS,GAAG,KAAK;MACvBoB,KAAK,CAACnB,OAAO,GAAG,IAAI;MACpBmB,KAAK,CAACjB,OAAO,GAAGuB,MAAM,CAACC,OAAO;IAClC,CAAC,CAAC;EACV;AACJ,CAAC,CAAC;AAGF,OAAO,MAAM;EAAER;AAAM,CAAC,GAAGH,SAAS,CAACa,OAAO;AAC1C,eAAeb,SAAS,CAACc,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}