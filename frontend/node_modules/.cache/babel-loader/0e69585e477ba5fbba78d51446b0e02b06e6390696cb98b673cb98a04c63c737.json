{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport authService from \"./authService\";\n\n// const user = JSON.parse(localStorage.getItem(\"user\"))\n\nconst initialState = {\n  user: JSON.parse(localStorage.getItem(\"user\")) ? JSON.parse(localStorage.getItem(\"user\")) : null,\n  isLoading: false,\n  isError: false,\n  isSuccess: false,\n  message: \"\"\n};\n\n//Below we list out our actions\n//Register user\nexport const register = createAsyncThunk(\"auth/register\", async (userData, thunkAPI) => {\n  try {\n    return await authService.register(userData);\n  } catch (error) {\n    //here we get message from the backend\n    //if it is a message this part is called\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\n\n// Login user\nexport const login = createAsyncThunk(\"auth/login\", async (userData, thunkAPI) => {\n  try {\n    return await authService.login(userData);\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    //by this return we put the error message in the payload\n    return thunkAPI.rejectWithValue(message);\n  }\n});\n\n//logout\nexport const logout = createAsyncThunk(\"auth/logout\", async (_, thunkAPI) => {\n  await authService.logout();\n});\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  //here is about only UI state mangement\n  reducers: {\n    reset: state => {\n      state.isLoading = false;\n      state.isError = false;\n      state.isSuccess = false;\n      state.message = \"\";\n    }\n  },\n  //thos actions we can catch down here\n  extraReducers: builder => {\n    builder.addCase(register.pending, state => {\n      state.isLoading = true;\n    }).addCase(register.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.user = action.payload;\n    }).addCase(register.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      //this message comes from rejectWithValue\n      state.message = action.payload;\n      state.user = null;\n    }).addCase(logout.fulfilled, state => {\n      state.user = null;\n    }).addCase(login.pending, state => {\n      state.isLoading = true;\n    }).addCase(login.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.user = action.payload;\n    }).addCase(login.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n      state.user = null;\n    });\n  }\n});\nexport const {\n  reset\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","authService","initialState","user","JSON","parse","localStorage","getItem","isLoading","isError","isSuccess","message","register","userData","thunkAPI","error","response","data","toString","rejectWithValue","login","logout","_","authSlice","name","reducers","reset","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","actions","reducer"],"sources":["E:/front-to-backend/support-ticket/frontend/src/features/auth/authSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\"\r\nimport authService from \"./authService\"\r\n\r\n// const user = JSON.parse(localStorage.getItem(\"user\"))\r\n\r\nconst initialState = {\r\n    user: JSON.parse(localStorage.getItem(\"user\")) ? JSON.parse(localStorage.getItem(\"user\")) : null,\r\n    isLoading: false,\r\n    isError: false,\r\n    isSuccess: false,\r\n    message: \"\"\r\n}\r\n\r\n\r\n//Below we list out our actions\r\n//Register user\r\nexport const register = createAsyncThunk(\"auth/register\", async (userData, thunkAPI) => {\r\n    try {\r\n        return await authService.register(userData)\r\n    } catch (error) {\r\n        //here we get message from the backend\r\n        //if it is a message this part is called\r\n        const message = (error.response && error.response.data && error.response.data.message)\r\n            || error.message\r\n            || error.toString()\r\n        return thunkAPI.rejectWithValue(message)\r\n    }\r\n})\r\n\r\n\r\n// Login user\r\nexport const login = createAsyncThunk(\"auth/login\", async (userData, thunkAPI) => {\r\n    try {\r\n        return await authService.login(userData)\r\n    } catch (error) {\r\n        const message = (error.response && error.response.data && error.response.data.message)\r\n            || error.message\r\n            || error.toString()\r\n        //by this return we put the error message in the payload\r\n        return thunkAPI.rejectWithValue(message)\r\n    }\r\n})\r\n\r\n\r\n//logout\r\nexport const logout = createAsyncThunk(\"auth/logout\", async (_, thunkAPI) => {\r\n    await authService.logout()\r\n})\r\n\r\nexport const authSlice = createSlice({\r\n    name: 'auth',\r\n    initialState,\r\n    //here is about only UI state mangement\r\n    reducers: {\r\n        reset: (state) => {\r\n            state.isLoading = false\r\n            state.isError = false\r\n            state.isSuccess = false\r\n            state.message = \"\"\r\n        }\r\n    },\r\n    //thos actions we can catch down here\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(register.pending, (state) => {\r\n                state.isLoading = true\r\n            })\r\n            .addCase(register.fulfilled, (state, action) => {\r\n                state.isLoading = false\r\n                state.isSuccess = true\r\n                state.user = action.payload\r\n            })\r\n            .addCase(register.rejected, (state, action) => {\r\n                state.isLoading = false\r\n                state.isError = true\r\n                //this message comes from rejectWithValue\r\n                state.message = action.payload\r\n                state.user = null\r\n            })\r\n            .addCase(logout.fulfilled, (state) => {\r\n                state.user = null\r\n            })\r\n            .addCase(login.pending, (state) => {\r\n                state.isLoading = true\r\n            })\r\n            .addCase(login.fulfilled, (state, action) => {\r\n                state.isLoading = false\r\n                state.isSuccess = true\r\n                state.user = action.payload\r\n            })\r\n            .addCase(login.rejected, (state, action) => {\r\n                state.isLoading = false\r\n                state.isError = true\r\n                state.message = action.payload\r\n                state.user = null\r\n            })\r\n    }\r\n})\r\n\r\n\r\nexport const { reset } = authSlice.actions\r\nexport default authSlice.reducer"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}